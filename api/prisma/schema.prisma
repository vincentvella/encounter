// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id          String   @id @default(uuid())
  // Possible Profile Attributes
  phoneNumber String?  @unique
  fbUserId    String?  @unique
  password    String
  // Relationships
  profile     Profile? // Signifies one or zero profiles for accounts
  role        Role     @default(USER)
}

model Profile {
  id        String @id @default(uuid())
  // Attributes
  email     String
  firstName String
  lastName  String

  // Relationships
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String          @unique
  SearchCriteria SearchCriteria?
  UserWaiting    UserWaiting?
  RoomAsCaller   Room[]          @relation("caller")
  RoomAsCallee   Room[]          @relation("callee")
  EncounterP1    Encounter[]     @relation("profile1")
  EncounterP2    Encounter[]     @relation("profile2")
  Rater          UserFeedback[]  @relation("rater")
  Rated          UserFeedback[]  @relation("rated")
}

model SearchCriteria {
  id           Int       @id @default(autoincrement())
  // Attributes
  searchRadius Float
  // Relationships
  profile      Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String    @unique
  location     Location?
  // location.latitude | location.longitude
}

model Location {
  id               Int            @id @default(autoincrement())
  latitude         Float
  longitude        Float
  searchCriteria   SearchCriteria @relation(fields: [searchCriteriaId], references: [id], onDelete: Cascade)
  searchCriteriaId Int            @unique
}

model Room {
  id        String     @id @default(uuid())
  caller    Profile    @relation("caller", fields: [callerId], references: [id])
  callee    Profile    @relation("callee", fields: [calleeId], references: [id])
  callerId  String
  calleeId  String
  ended     DateTime?
  Feedback  Feedback[]
  Encounter Encounter?
}

model UserWaiting {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String   @unique
  queuedAt  DateTime @default(now())
}

model SharedAttributes {
  id                     String     @id @default(uuid())
  email                  Boolean
  firstName              Boolean
  lastName               Boolean
  phoneNumber            Boolean
  EncounterWhereProfile1 Encounter? @relation("profile1SharedAttributes")
  EncounterWhereProfile2 Encounter? @relation("profile2SharedAttributes")
}

model Encounter {
  id                         String            @id @default(uuid())
  room                       Room              @relation(fields: [id], references: [id], onDelete: Cascade)
  profile1Id                 String            @unique
  profile1                   Profile           @relation("profile1", fields: [profile1Id], references: [id])
  profile1SharedAttributesId String            @unique
  profile1SharedAttributes   SharedAttributes  @relation("profile1SharedAttributes", fields: [profile1SharedAttributesId], references: [id])
  profile2Id                 String?           @unique
  profile2                   Profile?          @relation("profile2", fields: [profile2Id], references: [id])
  profile2SharedAttributesId String?           @unique
  profile2SharedAttributes   SharedAttributes? @relation("profile2SharedAttributes", fields: [profile2SharedAttributesId], references: [id])
  savedOn                    DateTime?
}

model Feedback {
  id                Int     @id @default(autoincrement())
  roomId            String
  room              Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  callQuality       Float   @default(0)
  connectionSecured Boolean @default(false)
}

model UserFeedback {
  id          Int     @id @default(autoincrement())
  userQuality Float   @default(0)
  rater       Profile @relation("rater", fields: [raterId], references: [id])
  rated       Profile @relation("rated", fields: [ratedId], references: [id])
  raterId     String
  ratedId     String
}
